## Java Virtual Machine

### JVM이란

**Java 애플리케이션을 클래스 로더를 통해 읽어 들여 Java API와 함께 실행하는 것을 말한다.**

JVM은 **Java와 OS 사이에서 중개자 역할을 하며 Java가 OS에 구애받지 않고 재사용**을 가능하게끔 해준다.

JVM은 **스택기반의 가상머신으로 메모리 관리와 Garbage Collection을 수행**한다.



**우리는 왜 JVM을 알아야 할까?**

메모리는 한정되어 있고 우리는 이 한정된 메모리에 안에서 프로그램을 실행해야하니 메모리를 최대한 효율적으로 사용해야 하는 것이다.

메모리를 효율적으로 사용하기 위해서는 **메모리 구조를 알고 메모리 관리가 어떤 식으로 되는 진행되는 지 파악하여 그 입맛에 맞게 개발을 해야한다.**



**JAVA 프로그램의 실행 과정을 살펴보자**

1. 우리가 작성한 Java를 실행하면 JVM은 OS로부터 메모리를 할당받는다.
2. JVM은 할당받은 메모리를 용도에 따라 여러 영역으로 나누어 관리힌다.
3. 그 후 **Java 컴파일러(javac)**가 **java 소스 코드(.java)**를 읽어드려 **java 바이트 코드(.class)**로 변환시킨다.
4. 변환 시킨 java 바이트 코드는 **클래스 로더**를 통해 JVM에 로딩된다.
5. JVM에 로딩된 **java 바이트 코드는 Execution Engine에 의해 해석**된다.
6. 해석이 완료되면 java 바이트 코드는 Runtime Data Areas에 배치되어 실질적인 수행이 이루어진다.



![image](https://user-images.githubusercontent.com/40616436/73047681-f0ea9a00-3eb9-11ea-9cf6-ea1128985c9d.png)

**클래스 로더**

Runtime 시에 동적으로 바이트 코드(.class)를 JVM내로 로드한다.

jar파일 내 저장된 클래스들을 JVM 위에 탑재하고 사용하지 않는 클래스들은 메모리에서 삭제한다.(컴파일러 역할)



**Execution Engine**

